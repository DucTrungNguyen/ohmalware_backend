import aiofiles
from fastapi import FastAPI, UploadFile, File
from pydantic import BaseModel, HttpUrl
import store
import helper

from modules.detect import detect_wide_deep
from fastapi.middleware.cors import CORSMiddleware
import json
import keras

from ultils.helper import check_extension

from modules.reverse import reverse
#
# if __name__ == '__main__':
#     reverse.reverse(
#         'e65abc856458f0c8b34308b9358884512f28bea31fc6e326f6c1078058c05fb9.apk')


class Image(BaseModel):
    url: HttpUrl
    name: str


app = FastAPI()

origins = [
    "http://localhost.tiangolo.com",
    "https://localhost.tiangolo.com",
    "http://localhost",
    "http://localhost:8080",
]

app.add_middleware(
    CORSMiddleware,
    allow_origins=['*'],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)


# Opening JSON file
f = open('modules/detect/wide_deep/label.json')

# returns JSON object as
# a dictionary
store.labels = json.load(f)

f.close()

store.model_wide_deep = keras.models.load_model('modules/detect/wide_deep/new_model.h5')

store.struct_features = helper.read_struct_future()

template = 'modules/reverse/templeApks/'


@app.get("/")
async def root():
    return {"message": "Hello World"}


@app.put("/scan_featured/", tags=["scan_featured"])
async def scan_app_with_featured():
    a = 1


@app.post("/scan_singlefile/", tags=["scan_singlefile"])
async def scan_single_app(file: UploadFile = File(...)):
    try:

        file_name = file.filename
        print(file_name)

        if file_name.split('.')[-1] != 'apk':
            return {'status': 401,
                    'msg': 'PLease send file with extesion is .apk'}

        full_path = template + file_name

        async with aiofiles.open(full_path, 'wb') as out_file:
            content = await file.read()  # async read
            await out_file.write(content)
        print('file name ', file_name)

        # return {'status': 200}
        name_md5, apk_total_analysis, row = reverse.reverse(file_name)

        result = detect_wide_deep.detect_single_app(row)

        label = result[0]
        # print(store.labels['2'][str(label)])

        labelNum = store.labels['2'][str(label)]
        # print(f' this is {labelNum}')
        labelText = store.labels['1'][str(labelNum)]

        # print(f'label text {labelText}')

        isMalware = True
        if labelText == '0_apps':
            isMalware = False
        return {'status': 200,
                'data': {'apk_total_analysis': apk_total_analysis, 'isMalware': isMalware, 'type': labelText}}

    except Exception as e:
        print(e)
        return {'status': 500}


@app.post("/scan_multi", tags=["scan_multi"])
async def scan_multi():
    try:
        a = 1
        return {'status': 200}
    except Exception as e:
        return {'status': 500}
