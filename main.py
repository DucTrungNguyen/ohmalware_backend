import aiofiles
from fastapi import FastAPI, UploadFile, File
# from routers import scan_app
import store
import helper
# from ultils.helper import *
from modules.reverse import reverse
# from modules.reverse import reverse
# from modules.detect import Train

# from keras.models import Model
import keras

from ultils.helper import check_extension

app = FastAPI()
# app.include_router(scan_app.router)

# store.model_wide_deep =
store.model_wide_deep = keras.models.load_model('modules/detect/wide_deep/wide_deep.h5')
store.struct_features = helper.read_struct_future()

template = 'modules/reverse/templeApks/'


@app.get("/")
async def root():
    return {"message": "Hello World"}


@app.put("/scan_featured/", tags="scan_featured")
async def scan_app_with_featured():
    a = 1




@app.post("/scan_singlefile/", tags="scan_singlefile")
async def scan_single_app(file: UploadFile = File(...)):
    try:

        file_name = file.filename
        print(file_name)

        if file_name.split('.')[-1] != 'apk':
            return {'status': 401,
                    'msg': 'PLease send file with extesion is .apk'}

        full_path = template + file_name

        async with aiofiles.open(full_path, 'wb') as out_file:
            content = await file.read()  # async read
            await out_file.write(content)
        print('file name ', file_name)

        # return {'status': 200}
        name_md5, apk_total_analysis, row = reverse.reverse(file_name)
        return {'status': 200, 'data': {'apk_total_analysis': apk_total_analysis, 'row': row}}


    except Exception as e:
        print(e)
        return {'status': 500}


@app.post("/scan_multi", tags="scan_multi")
async def scan_multi():
    try:
        a = 1
        return {'status': 200}
    except Exception as e:
        return {'status': 500}
