import aiofiles
from fastapi import FastAPI, UploadFile, File
# from routers import scan_app
import store
import helper
# from ultils.helper import *
from modules.reverse import reverse
from modules.detect import detect_wide_deep
from fastapi.middleware.cors import CORSMiddleware
import json
from typing import List
from pydantic import BaseModel
# from modules.reverse import reverse
# from modules.detect import Train

from keras.models import Model

import keras

from ultils.helper import check_extension
from typing import Dict, Any

app = FastAPI()

origins = [
    "http://localhost.tiangolo.com",
    "https://localhost.tiangolo.com",
    "http://localhost",
    "http://localhost:8080",
]

app.add_middleware(
    CORSMiddleware,
    allow_origins=['*'],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Opening JSON file
f = open('modules/detect/wide_deep/label.json')

# returns JSON object as
# a dictionary
store.labels = json.load(f)

f.close()

store.model_wide_deep = keras.models.load_model('modules/detect/wide_deep/new_model.h5')

store.struct_features = helper.read_struct_future()
# print(len(store.struct_features))

template = 'modules/reverse/templeApks/'


class App(BaseModel):
    name: str
    package: str
    permission: list
    services: list


@app.get("/")
async def root():
    return {
        "message": "Hi, don't attack me anymore, this server for a project in subject in my school, will be shutdown "
                   "soon :(( "}


@app.post("/scan_featured/", tags=["scan_featured"])
async def scan_app_with_featured(data: Dict[Any, Any] = None):
    try:
        list_result = []
        for app_data in data['data']:
            # print(' vao for permissions ')
            row = reverse.standardDataFeature(permissions=app_data['permissions'], services=app_data['services'])
            label = detect_wide_deep.detect_single_app(row)[0]
            # print(result)
            # label = result[0]
            label_num = store.labels['2'][str(label)]
            label_text = store.labels['1'][str(label_num)]

            is_malware = True
            if label_text == '0_apps':
                is_malware = False

            list_result.append({
                'name': app_data['name'],
                'package': app_data['package'],
                'labelText': label_text,
                'isMalware': is_malware

            })

        # print(list_result)
        return {
            'status': 200,
            'data': list_result
        }
    except Exception as e:
        # print()
        return {
            'status': 500,
            'data': []
        }


@app.post("/scan_singlefile/", tags=["scan_singlefile"])
async def scan_single_app(file: UploadFile = File(...)):
    try:

        file_name = file.filename
        print(file_name)

        if file_name.split('.')[-1] != 'apk':
            return {'status': 401,
                    'msg': 'PLease send file with extension is .apk'}

        full_path = template + file_name

        async with aiofiles.open(full_path, 'wb') as out_file:
            content = await file.read()  # async read
            await out_file.write(content)
        # print('file name ', file_name)

        # return {'status': 200}
        name_md5, apk_total_analysis, row = reverse.reverse(file_name)
        #
        result = detect_wide_deep.detect_single_app(row)

        label = result[0]

        labelNum = store.labels['2'][str(label)]
        labelText = store.labels['1'][str(labelNum)]
        # labelText = "abc"

        # print(f'label text {labelText}')

        isMalware = True
        if labelText == '0_apps':
            isMalware = False
        return {'status': 200,
                'data': {'apk_total_analysis': apk_total_analysis, 'isMalware': isMalware, 'type': labelText}}

    except Exception as e:
        print(e)
        return {'status': 500}


@app.post("/scan_multi", tags=["scan_multi"])
async def scan_multi():
    try:
        a = 1
        return {'status': 200}
    except Exception as e:
        return {'status': 500}
