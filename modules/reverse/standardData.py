# kmadetect
# By Nguyen Trung

import store

SUM_ACII = 8128

Permissions = []
APICalls = []
Activity = []
Intent = []
Url = []
Services = []
Service_receiver = []


def standardData(pre_static_dict, static_analysis_dict):
    features = []

    getPermissions(static_analysis_dict['Permissions'], features=features)
    getAPICalls(static_analysis_dict['API_calls'], features=features)

    features.extend(Permissions)
    features.extend(APICalls)

    final_features = []

    for i in range(3, len(store.struct_features)):
        if store.struct_features[i] in features:
            final_features.append(1)
        else:
            final_features.append(0)

    return final_features


def getPermissions(static_analysis_dict, features):
    return [permisson.split('.')[-1] for permisson in static_analysis_dict]

    # Permissions.extend(static_analysis_dict)


def getAPICalls(static_analysis_dict, features):
    return [api_call.replace(' ', '') for api_call in static_analysis_dict]


def getStrings(static_analysis_dict, features):
    for str in static_analysis_dict:
        if sumChar(str) > 8128:
            continue
        if "http://" in str:
            Url.append(str)
        if ".Intent." in str:
            Intent.append(str)


def getIntents(static_analysis_dict, features):
    Intent.extend(static_analysis_dict)


def getActivities(static_analysis_dict, features):
    if static_analysis_dict != None:
        Activity.extend(static_analysis_dict)


def getServices(static_analysis_dict, features):
    for service in static_analysis_dict:
        Services.extend(service)


def getReceivers(static_analysis_dict, features):
    if static_analysis_dict != None:
        Service_receiver.extend(static_analysis_dict)


def sumChar(features):
    sum = 0
    for c in features:
        sum += ord(c)
    return sum


def convertToNumber(line):
    sumChar = 0
    for c in line:
        sumChar += ord(c)
    return str(round((sumChar / SUM_ACII), 6))
